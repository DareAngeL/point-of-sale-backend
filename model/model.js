const { defineUserfile } = require("./modelschema/pos-userfile");
const { defineHeaderfile } = require("./modelschema/headerfile");
const { defineSystemParameters } = require("./modelschema/systemparameters");
const { defineFooter } = require("./modelschema/footer");
const { defineTerminal } = require("./modelschema/terminal");
const { defineLocationfile } = require("./modelschema/locationfile");
const {
  defineItemClassification,
} = require("./modelschema/itemclassification");
const {
  defineItemsubclassification,
} = require("./modelschema/itemsubclassification");
const { defineItem } = require("./modelschema/item");
const { defineSpecialRequest } = require("./modelschema/specialrequest");
const { defineCardType } = require("./modelschema/cardtype");
const { defineFreeReason } = require("./modelschema/freereason");
const { defineOtherPayment } = require("./modelschema/otherpayment");
const { defineDineType } = require("./modelschema/dinetype");
const { defineDiscount } = require("./modelschema/discount");
const { definePricelist } = require("./modelschema/pricelist");
const { definePriceDetail } = require("./modelschema/pricedetail");
const { defineWarehouse } = require("./modelschema/warehouse");
const { defineWarehouseDetail } = require("./modelschema/warehousedetail");
const { defineMemc } = require("./modelschema/memc");
const { defineCompany } = require("./modelschema/company");
const { defineVoidReason } = require("./modelschema/voidreason");
const { definePosfile } = require("./modelschema/posfile");
const { defineTaxCode } = require("./modelschema/taxcode");
const { defineOrderItemDiscount } = require("./modelschema/orderitemdiscount");
const { defineOrderDiscount } = require("./modelschema/orderdiscount");
const { defineTransaction } = require("./modelschema/transaction");
const { defineUserActivityLog } = require("./modelschema/useractivitylog");
const {
  defineSpecialRequestGroup,
} = require("./modelschema/specialrequestgroup");
const { defineItemCombo } = require("./modelschema/itemcombo");
const { defineUserAccess } = require("./modelschema/useraccess");
const { defineUserReport } = require("./modelschema/userreport");
const { defineMenus } = require("./modelschema/menus");
const { defineMasterFileLog } = require("./modelschema/masterfilelog");
const {
  defineSpecialRequestDetail,
} = require("./modelschema/specialrequestdetail");
const { defineZReadingFile } = require("./modelschema/zreadingfile");
const { defineSales } = require("./modelschema/sales");
const { defineSalesDetail } = require("./modelschema/salesdetail");
const { defineCashIOReason } = require("./modelschema/cashioreason");
const { defineBranchFile } = require("./modelschema/branchfile");
const { defineTheme } = require("./modelschema/themefile");
const { defineSalesReturnfile1 } = require("./modelschema/salesreturnfile1");
const { defineSalesReturnfile2 } = require("./modelschema/salesreturnfile2");
const { defineMallHookupFile } = require("./modelschema/mallhookupfile");
const { defineMallhookupFile2 } = require("./modelschema/mallhookupfile2");
const { defineTimelogfile } = require("./modelschema/timelogfile");
const { definePosOrderingfile } = require("./modelschema/posorderingfile");
const { defineForFtpFile } = require("./modelschema/forftpfile");

let modelList = {};

function mapTables(sequelize) {
  const userfile = defineUserfile(sequelize);
  const headerfile = defineHeaderfile(sequelize);
  const systemparameters = defineSystemParameters(sequelize);
  const footer = defineFooter(sequelize);
  const terminal = defineTerminal(sequelize);
  const printerstation = defineLocationfile(sequelize);
  const itemclassification = defineItemClassification(sequelize);
  const itemsubclassification = defineItemsubclassification(sequelize);
  const item = defineItem(sequelize);
  const specialrequest = defineSpecialRequest(sequelize);
  const specialrequestdetail = defineSpecialRequestDetail(sequelize);
  const cardtype = defineCardType(sequelize);
  const freereason = defineFreeReason(sequelize);
  const otherpayment = defineOtherPayment(sequelize);
  const dinetype = defineDineType(sequelize);
  const discount = defineDiscount(sequelize);
  const pricelist = definePricelist(sequelize);
  const pricedetail = definePriceDetail(sequelize);
  const warehouse = defineWarehouse(sequelize);
  const warehousedetail = defineWarehouseDetail(sequelize);
  const memc = defineMemc(sequelize);
  const company = defineCompany(sequelize);
  const voidreason = defineVoidReason(sequelize);
  const posfile = definePosfile(sequelize);
  const taxcode = defineTaxCode(sequelize);
  const orderitemdiscount = defineOrderItemDiscount(sequelize);
  const orderdiscount = defineOrderDiscount(sequelize);
  const transaction = defineTransaction(sequelize);
  const useractivitylog = defineUserActivityLog(sequelize);
  const specialrequestgroup = defineSpecialRequestGroup(sequelize);
  const itemcombo = defineItemCombo(sequelize);
  const useraccess = defineUserAccess(sequelize);
  const userreport = defineUserReport(sequelize);
  const menus = defineMenus(sequelize);
  const masterfilelog = defineMasterFileLog(sequelize);
  const zreadingfile = defineZReadingFile(sequelize);
  const sales = defineSales(sequelize);
  const salesdetail = defineSalesDetail(sequelize);
  const cashIOReason = defineCashIOReason(sequelize);
  const branchfile = defineBranchFile(sequelize);
  const themefile = defineTheme(sequelize);
  const salesreturnfile1 = defineSalesReturnfile1(sequelize);
  const salesreturnfile2 = defineSalesReturnfile2(sequelize);
  const mallhookupfile = defineMallHookupFile(sequelize);
  const mallhookupfile2 = defineMallhookupFile2(sequelize);
  const timelogfile = defineTimelogfile(sequelize);
  const posorderingfile = definePosOrderingfile(sequelize);
  const forftpfile = defineForFtpFile(sequelize);

  modelList["systemparameters"] = systemparameters;
  modelList["pos_userfile"] = userfile;
  modelList["headerfile"] = headerfile;
  modelList["footer"] = footer;
  modelList["terminal"] = terminal;
  modelList["locationfile"] = printerstation;
  modelList["itemclassification"] = itemclassification;
  modelList["itemsubclassification"] = itemsubclassification;
  modelList["item"] = item;
  modelList["specialrequest"] = specialrequest;
  modelList["specialrequestdetail"] = specialrequestdetail;
  modelList["cardtype"] = cardtype;
  modelList["freereason"] = freereason;
  modelList["otherpayment"] = otherpayment;
  modelList["dinetype"] = dinetype;
  modelList["discount"] = discount;
  modelList["pricelist"] = pricelist;
  modelList["pricedetail"] = pricedetail;
  modelList["warehouse"] = warehouse;
  modelList["warehousedetail"] = warehousedetail;
  modelList["memc"] = memc;
  modelList["company"] = company;
  modelList["voidreason"] = voidreason;
  modelList["posfile"] = posfile;
  modelList["taxcode"] = taxcode;
  modelList["orderitemdiscount"] = orderitemdiscount;
  modelList["orderdiscount"] = orderdiscount;
  modelList["transaction"] = transaction;
  modelList["useractivitylog"] = useractivitylog;
  modelList["specialrequestgroup"] = specialrequestgroup;
  modelList["itemcombo"] = itemcombo;
  modelList["menus"] = menus;
  modelList["useraccess"] = useraccess;
  modelList["userreport"] = userreport;
  modelList["masterfilelog"] = masterfilelog;
  modelList["zreadingfile"] = zreadingfile;
  modelList["sales"] = sales;
  modelList["salesdetail"] = salesdetail;
  modelList["cashIOReason"] = cashIOReason;
  modelList["branchfile"] = branchfile;
  modelList["themefile"] = themefile;
  modelList["salesreturnfile1"] = salesreturnfile1;
  modelList["salesreturnfile2"] = salesreturnfile2;
  modelList["mallhookupfile"] = mallhookupfile;
  modelList["mallhookupfile2"] = mallhookupfile2;
  modelList["timelogfile"] = timelogfile;
  modelList["posorderingfile"] = posorderingfile;
  modelList["forftpfile"] = forftpfile;

  systemparameters.instance.SetModelList(modelList);
  userfile.instance.SetModelList(modelList);
  headerfile.instance.SetModelList(modelList);
  footer.instance.SetModelList(modelList);
  terminal.instance.SetModelList(modelList);
  printerstation.instance.SetModelList(modelList);
  itemclassification.instance.SetModelList(modelList);
  itemsubclassification.instance.SetModelList(modelList);
  item.instance.SetModelList(modelList);
  specialrequest.instance.SetModelList(modelList);
  cardtype.instance.SetModelList(modelList);
  freereason.instance.SetModelList(modelList);
  otherpayment.instance.SetModelList(modelList);
  dinetype.instance.SetModelList(modelList);
  discount.instance.SetModelList(modelList);
  pricelist.instance.SetModelList(modelList);
  pricedetail.instance.SetModelList(modelList);
  warehouse.instance.SetModelList(modelList);
  warehousedetail.instance.SetModelList(modelList);
  memc.instance.SetModelList(modelList);
  company.instance.SetModelList(modelList);
  voidreason.instance.SetModelList(modelList);
  posfile.instance.SetModelList(modelList);
  taxcode.instance.SetModelList(modelList);
  orderitemdiscount.instance.SetModelList(modelList);
  orderdiscount.instance.SetModelList(modelList);
  transaction.instance.SetModelList(modelList);
  useractivitylog.instance.SetModelList(modelList);
  specialrequestgroup.instance.SetModelList(modelList);
  itemcombo.instance.SetModelList(modelList);
  menus.instance.SetModelList(modelList);
  useraccess.instance.SetModelList(modelList);
  userreport.instance.SetModelList(modelList);
  masterfilelog.instance.SetModelList(modelList);
  zreadingfile.instance.SetModelList(modelList);
  sales.instance.SetModelList(modelList);
  salesdetail.instance.SetModelList(modelList);
  cashIOReason.instance.SetModelList(modelList);
  branchfile.instance.SetModelList(modelList);
  themefile.instance.SetModelList(modelList);
  salesreturnfile1.instance.SetModelList(modelList);
  salesreturnfile2.instance.SetModelList(modelList);
  mallhookupfile.instance.SetModelList(modelList);
  mallhookupfile2.instance.SetModelList(modelList);
  timelogfile.instance.SetModelList(modelList);
  posorderingfile.instance.SetModelList(modelList);
  forftpfile.instance.SetModelList(modelList);
  for (const key in modelList) {
    modelList[key].initializeRelations(modelList);
  }
}

module.exports = { mapTables: mapTables, modelList: modelList };
